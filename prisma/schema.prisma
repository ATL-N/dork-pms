// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS

enum Role {
  OWNER
  MANAGER
  WORKER
}

enum FlockType {
  BROILER
  LAYER
  BREEDER
}

enum FeedType {
  COMPLETE
  INGREDIENT
}

enum InvoiceType {
  SALES
  PURCHASE
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum UserType {
  FARMER
  VET
  ADMIN
}

enum OwnerApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubscriptionPlan {
  FREE
  PRO
  UNLIMITED
}

enum VetRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VetAccessStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum ScheduleStatus {
  SCHEDULED
  COMPLETED
  MISSED
}

enum TransactionType {
  EXPENSE
  REVENUE
}



// CORE MODELS

model Farm {
  id          String @id @default(cuid())
  name        String
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  owner       User     @relation("FarmOwner", fields: [ownerId], references: [id])
  users       FarmUser[]
  flocks      Flock[]
  feedItems   FeedItem[]
  inventory   InventoryItem[]
  transactions Transaction[]
  invoices    Invoice[]
  eggSales    EggSale[]
  formulations FeedFormulation[]
  tasks       Task[]
  veterinarians VetFarmAccess[]
  vetAccessRequests VetAccessRequest[]
  invitations Invitation[]

  @@index([name])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  userType      UserType  @default(FARMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  ownerApprovalStatus OwnerApprovalStatus?

  ownedFarms    Farm[]           @relation("FarmOwner")
  accounts      Account[]
  sessions      Session[]
  subscription  Subscription?

  farms         FarmUser[]
  profile       UserProfile?
  vetProfile    VeterinarianProfile?
  tasksAssigned Task[]
  feedConsumptionRecorded FeedConsumption[]
  formulationsCreated FeedFormulation[]
  sentMessages  Message[] @relation("sentMessages")
  conversations ConversationParticipant[]
  pinnedConversations PinnedConversation[]
  ratingsGiven  VeterinarianRating[] @relation("ratedBy")
  ratingsReceived VeterinarianRating[] @relation("ratedVeterinarian")
  consultsFor   VetFarmAccess[] @relation("VetConsults")
  vetAccessRequests VetAccessRequest[]
  readReceipts  ReadReceipt[]
  logs          Log[]
  recordedBirdResales BirdResale[]
  recordedEggSales EggSale[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String   @unique
  plan        SubscriptionPlan @default(FREE)
  farmLimit   Int
  startDate   DateTime @default(now())
  endDate     DateTime?
  status      String   @default("ACTIVE") // e.g., ACTIVE, CANCELED

  user User @relation(fields: [userId], references: [id])
}

model FarmUser {
  farmId    String
  userId    String
  role      Role     @default(WORKER)
  assignedAt DateTime @default(now())

  farm      Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([farmId, userId])
}

model VetFarmAccess {
  id             String          @id @default(cuid())
  farmId         String
  veterinarianId String
  grantedAt      DateTime        @default(now())
  expiresAt      DateTime
  status         VetAccessStatus @default(ACTIVE)

  veterinarian User @relation("VetConsults", fields: [veterinarianId], references: [id], onDelete: Cascade)
  farm         Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@unique([farmId, veterinarianId])
}

model VetAccessRequest {
  id             String   @id @default(cuid())
  farmId         String
  veterinarianId String
  status         VetRequestStatus @default(PENDING)
  requestedAt    DateTime @default(now())

  farm         Farm @relation(fields: [farmId], references: [id])
  veterinarian User @relation(fields: [veterinarianId], references: [id])

  @@unique([farmId, veterinarianId])
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  farmId    String
  role      Role
  token     String           @unique
  expiresAt DateTime
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
}

model UserProfile {
  userId      String @id
  contact     String?
  hireDate    DateTime?
  salary      Float?
  performance String?
  skills      String[]
  country     String?
  currency    String?

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VeterinarianProfile {
  userId          String  @id
  specialization  String?
  licenseNumber   String? @unique
  isVerified      Boolean @default(false)
  averageRating   Float   @default(0)
  ratingCount     Int     @default(0)

  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VeterinarianRating {
  id              String   @id @default(cuid())
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
  raterId         String
  veterinarianId  String

  rater           User     @relation("ratedBy", fields: [raterId], references: [id])
  veterinarian    User     @relation("ratedVeterinarian", fields: [veterinarianId], references: [id])
}

// CHAT MODELS

model Conversation {
  id          String   @id @default(cuid())
  name        String? // For group chats
  isGroup     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants ConversationParticipant[]
  messages     Message[]
  pinnedBy     PinnedConversation[]
}

model PinnedConversation {
  userId         String
  conversationId String
  pinnedAt       DateTime @default(now())

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model ConversationParticipant {
  conversationId String
  userId         String

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([conversationId, userId])
}

model Message {
  id              String   @id @default(cuid())
  content         String
  mediaUrl        String?
  mediaType       String?
  createdAt       DateTime @default(now())
  conversationId  String
  senderId        String
  isPinned        Boolean  @default(false)

  repliedToId     String?
  repliedTo       Message? @relation("Replies", fields: [repliedToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies         Message[] @relation("Replies")

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender          User         @relation("sentMessages", fields: [senderId], references: [id])
  readReceipts    ReadReceipt[]
}

model ReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

// FARM-SPECIFIC MODELS

model HealthScheduleTemplate {
  id        String    @id @default(cuid())
  birdType  FlockType
  day       Int
  taskName  String
  taskType  String // e.g., "Vaccination", "Medication", "Checkup"
  method    String // e.g., "Drinking Water", "Injection"
  notes     String?

  @@unique([birdType, day, taskName])
}

model Flock {
  id              String @id @default(cuid())
  name            String
  type            FlockType
  breed           String
  quantity        Int
  initialQuantity Int
  location        String?
  startDate       DateTime
  status          String     @default("active") // e.g., active, archived
  costPerBird     Float?     // Cost per bird at the time of acquisition
  firstEggDate    DateTime?
  farmId          String

  farm     Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)
  
  growthRecords GrowthRecord[]
  eggProductionRecords EggProductionRecord[]
  mortalityRecords MortalityRecord[]
  feedConsumption FeedConsumption[]
  birdResales     BirdResale[]
  healthTasks     HealthTask[]

  @@index([farmId])
}

model HealthTask {
  id              String   @id @default(cuid())
  flockId         String
  taskName        String
  taskType        String   // "Vaccination", "Medication", etc.
  method          String   // "Drinking Water", "Injection"
  scheduledDate   DateTime
  completedDate   DateTime?
  status          ScheduleStatus @default(SCHEDULED) // SCHEDULED, COMPLETED, MISSED
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  inventoryItemId String?
  quantityUsed    Float?

  flock           Flock    @relation(fields: [flockId], references: [id], onDelete: Cascade)
  inventoryItem   InventoryItem? @relation(fields: [inventoryItemId], references: [id])

  @@index([flockId, scheduledDate])
}

model GrowthRecord {
  id        String   @id @default(cuid())
  date      DateTime
  weight    Float
  flockId   String

  flock     Flock    @relation(fields: [flockId], references: [id], onDelete: Cascade)
}

model EggProductionRecord {
  id              String   @id @default(cuid())
  date            DateTime
  totalEggs       Int
  brokenEggs      Int
  averageWeight   Float?
  flockId         String

  flock           Flock    @relation(fields: [flockId], references: [id], onDelete: Cascade)
}

model MortalityRecord {
  id        String   @id @default(cuid())
  date      DateTime
  quantity  Int
  cause     String?
  flockId   String

  flock     Flock    @relation(fields: [flockId], references: [id], onDelete: Cascade)
}

model FeedItem {
  id            String   @id @default(cuid())
  name          String
  type          FeedType
  category      String?
  supplier      String?
  quantity      Float
  unit          String
  unitPrice     Float
  purchaseDate  DateTime
  expiryDate    DateTime?
  location      String?
  batchNumber   String?
  farmId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  farm          Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)
  consumptions  FeedConsumption[]
  formulationIngredients FormulationIngredient[]

  @@index([farmId])
}

model FeedConsumption {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  quantity    Float
  notes       String?
  flockId     String
  feedItemId  String
  recordedById String

  flock       Flock    @relation(fields: [flockId], references: [id])
  feedItem    FeedItem @relation(fields: [feedItemId], references: [id])
  recordedBy  User     @relation(fields: [recordedById], references: [id])
}

model FeedFormulation {
  id            String   @id @default(cuid())
  name          String
  description   String?
  farmId        String
  createdById   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  farm          Farm     @relation(fields: [farmId], references: [id])
  createdBy     User     @relation(fields: [createdById], references: [id])
  ingredients   FormulationIngredient[]

  @@index([farmId])
}

model FormulationIngredient {
  id              String @id @default(cuid())
  percentage      Float
  quantity        Float
  formulationId   String
  feedItemId      String

  formulation     FeedFormulation @relation(fields: [formulationId], references: [id], onDelete: Cascade)
  feedItem        FeedItem        @relation(fields: [feedItemId], references: [id])
}

model InventoryItem {
  id            String   @id @default(cuid())
  name          String
  category      String // e.g., medication, supplies
  currentStock  Float
  unit          String
  minThreshold  Float?
  supplier      String?
  status        String   @default("active") // e.g., active, archived
  farmId        String

  farm          Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)
  healthTasks   HealthTask[]

  @@index([farmId])
}

model Transaction {
  id          String   @id @default(cuid())
  date        DateTime
  type        TransactionType
  category    String
  amount      Float
  description String?
  vendor      String?
  customer    String?
  farmId      String
  
  farm        Farm     @relation(fields: [farmId], references: [id], onDelete: Cascade)
  eggSale     EggSale?
}

model Invoice {
  id        String       @id @default(cuid())
  invoiceNumber String
  date      DateTime
  dueDate   DateTime?
  type      InvoiceType
  status    InvoiceStatus
  amount    Float
  customer    String?
  vendor      String?
  farmId    String

  farm      Farm         @relation(fields: [farmId], references: [id], onDelete: Cascade)
}

model Task {
  id            String     @id @default(cuid())
  title         String
  assignedDate  DateTime
  dueDate       DateTime?
  status        TaskStatus @default(PENDING)
  assignedToId  String
  farmId        String

  assignedTo    User       @relation(fields: [assignedToId], references: [id])
  farm          Farm       @relation(fields: [farmId], references: [id], onDelete: Cascade)
}

model Log {
  id        String   @id @default(cuid())
  level     String // e.g., INFO, WARN, ERROR
  message   String
  meta      Json?
  timestamp DateTime @default(now())
  userId    String?

  user      User?    @relation(fields: [userId], references: [id])
}

model BirdResale {
  id           String   @id @default(cuid())
  flockId      String
  quantity     Int
  revenue      Float
  date         DateTime
  notes        String?
  recordedById String

  flock        Flock    @relation(fields: [flockId], references: [id])
  recordedBy   User     @relation(fields: [recordedById], references: [id])
}

model EggSale {
  id           String   @id @default(cuid())
  farmId       String
  quantity     Int
  amount       Float
  date         DateTime
  customer     String?
  notes        String?
  recordedById String
  transactionId String? @unique

  farm         Farm     @relation(fields: [farmId], references: [id])
  recordedBy   User     @relation(fields: [recordedById], references: [id])
  transaction  Transaction? @relation(fields: [transactionId], references: [id])
}
